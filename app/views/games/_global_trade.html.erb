<div class="card">
  <div class="card-body">
    <h5 class="card-title">Global Market</h5>

    <!-- Market Navigation Tabs -->
    <ul class="nav nav-tabs mb-3" id="marketTabs" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="sell-tab" data-bs-toggle="tab" data-bs-target="#sell-content" type="button" role="tab" aria-controls="sell-content" aria-selected="true">
          Sell Resources
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="buy-tab" data-bs-toggle="tab" data-bs-target="#buy-content" type="button" role="tab" aria-controls="buy-content" aria-selected="false">
          Buy Resources
        </button>
      </li>
    </ul>

    <div class="tab-content" id="marketTabsContent">
      <!-- Sell Tab Content -->
      <div class="tab-pane fade show active" id="sell-content" role="tabpanel" aria-labelledby="sell-tab">
        <p class="card-text">
          You can send goods to the public market.<br>
          You need market places to send goods.<br>
          There is <%= number_with_delimiter(@data[:game_data][:global_fee_percent]) %>% fee after you sell the goods.
        </p>

        <div class="alert alert-info">
          Your markets allow you to send <%= number_with_delimiter(@data[:user_data][:max_trades]) %> goods each month,
          <span class="<%= @data[:user_data][:trades_remaining].zero? ? 'text-danger' : '' %>">
            out of which <%= number_with_delimiter(@data[:user_data][:trades_remaining]) %> are still available.
          </span>
        </div>
  
        <%= form_with url: global_sell_user_game_trades_path(@user_game), method: :post, local: true do |f| %>
          <div class="table-responsive">
            <table class="table table-bordered">
              <thead class="table-dark">
                <tr>
                  <th>Resource</th>
                  <th class="text-end">You Have</th>
                  <th>Sell Amount</th>
                  <th>Price (per unit)</th>
                  <th class="text-end">Min Price</th>
                  <th class="text-end">Max Price</th>
                </tr>
              </thead>
              <tbody>
                <% [
                  { name: 'Wood', field: 'wood', value: @user_game.wood, min_price: @data[:game_data][:global_wood_min_price], max_price: @data[:game_data][:global_wood_max_price] },
                  { name: 'Food', field: 'food', value: @user_game.food, min_price: @data[:game_data][:global_food_min_price], max_price: @data[:game_data][:global_food_max_price] },
                  { name: 'Iron', field: 'iron', value: @user_game.iron, min_price: @data[:game_data][:global_iron_min_price], max_price: @data[:game_data][:global_iron_max_price] },
                  { name: 'Tools', field: 'tools', value: @user_game.tools, min_price: @data[:game_data][:global_tools_min_price], max_price: @data[:game_data][:global_tools_max_price] },
                  { name: 'Swords', field: 'swords', value: @user_game.swords, min_price: @data[:game_data][:global_swords_min_price], max_price: @data[:game_data][:global_swords_max_price] },
                  { name: 'Bows', field: 'bows', value: @user_game.bows, min_price: @data[:game_data][:global_bows_min_price], max_price: @data[:game_data][:global_bows_max_price] },
                  { name: 'Maces', field: 'maces', value: @user_game.maces, min_price: @data[:game_data][:global_maces_min_price], max_price: @data[:game_data][:global_maces_max_price] },
                  { name: 'Horses', field: 'horses', value: @user_game.horses, min_price: @data[:game_data][:global_horses_min_price], max_price: @data[:game_data][:global_horses_max_price] }
                ].each do |resource| %>
                  <tr>
                    <td><%= resource[:name] %></td>
                    <td class="text-end"><%= number_with_delimiter(resource[:value]) %></td>
                    <td>
                      <%= f.number_field "sell_#{resource[:field]}", class: 'form-control form-control-sm', min: 0, max: resource[:value] %>
                    </td>
                    <td>
                      <%= f.number_field "price_#{resource[:field]}", class: 'form-control form-control-sm', min: resource[:min_price], max: resource[:max_price] %>
                    </td>
                    <td class="text-end"><%= number_with_delimiter(resource[:min_price]) %></td>
                    <td class="text-end"><%= number_with_delimiter(resource[:max_price]) %></td>
                  </tr>
                <% end %>
              </tbody>
              <tfoot>
                <tr>
                  <td colspan="6" class="text-end">
                    <%= f.submit 'Sell', class: 'btn btn-primary' %>
                  </td>
                </tr>
              </tfoot>
            </table>
          </div>
        <% end %>

        <% if @user_game.transfer_queues.where(transfer_type: :sell).any? %>
          <div class="card mt-4">
            <div class="card-header bg-dark text-white">
              <h5 class="card-title mb-0">Dispatched Caravans</h5>
            </div>
            <div class="card-body">
              <% @user_game.transfer_queues.where(transfer_type: :sell).order(turns_remaining: :desc, id: :asc).each do |transfer| %>
                <div class="card mb-3">
                  <div class="card-body">
                    <% if transfer.turns_remaining.positive? %>
                      <h6 class="card-subtitle mb-2 text-muted">
                        Caravans departed with:
                      </h6>
                      <div class="row">
                        <% UserGame::GLOBAL_TRADE_RESOURCES.each do |resource| %>
                          <% if transfer.send(resource).present? %>
                            <div class="col-md-3 mb-2">
                              <%= number_with_delimiter(transfer.send(resource)) %> <%= resource.titleize %>
                            </div>
                          <% end %>
                        <% end %>
                      </div>
                      <p class="card-text mt-2">
                        Will reach their destination in <%= transfer.turns_remaining %> turns.
                      </p>
                    <% else %>
                      <h6 class="card-subtitle mb-2 text-muted">
                        You have on the public market:
                      </h6>
                      <%= form_with url: global_change_prices_user_game_trades_path(@user_game, transfer_queue_id: transfer.id), method: :post, local: true do |f| %>
                        <div class="row">
                          <% UserGame::GLOBAL_TRADE_RESOURCES.each do |resource| %>
                            <% if transfer.send(resource).present? %>
                              <div class="col-md-3 mb-2">
                                <div class="input-group input-group-sm">
                                  <span class="input-group-text"><%= number_with_delimiter(transfer.send(resource)) %> <%= resource.titleize %></span>
                                  <%= f.number_field "price_#{resource}",
                                                     value: transfer.send("#{resource}_price"),
                                                     class: 'form-control',
                                                     min: @data[:game_data]["global_#{resource}_min_price"],
                                                     max: @data[:game_data]["global_#{resource}_max_price"] %>
                                  <span class="input-group-text">gold each</span>
                                </div>
                              </div>
                            <% end %>
                          <% end %>
                        </div>
                        <div class="mt-3">
                          <%= f.submit 'Change Prices', class: 'btn btn-primary btn-sm' %>
                          <button onclick="return withdrawFromMarket(<%= transfer.id %>)" class="btn btn-sm btn-danger">Withdraw from market</button>
                        </div>
                      <% end %>
                    <% end %>
                  </div>
                </div>
              <% end %>
            </div>
          </div>
        <% end %>
      </div>

      <!-- Buy Tab Content -->
      <div class="tab-pane fade" id="buy-content" role="tabpanel" aria-labelledby="buy-tab">
        <div class="mb-3">
          <p>Select resource to buy:</p>
          <div class="btn-group" role="group" aria-label="Resource selection">
            <% UserGame::GLOBAL_TRADE_RESOURCES.each do |resource| %>
              <button type="button" class="btn btn-outline-secondary resource-btn" data-resource="<%= resource %>">
                <%= resource.titleize %>
              </button>
            <% end %>
          </div>
        </div>

        <div id="resource-markets">
          <% UserGame::GLOBAL_TRADE_RESOURCES.each do |resource| %>
            <div id="<%= resource %>-market" class="resource-market d-none">
              <h6 class="border-bottom pb-2 mb-3">Buy <%= resource.titleize %> (You have <%= number_with_delimiter(@user_game.send(resource)) %>)</h6>
              <div id="<%= resource %>-listings" class="resource-listings">
                <div class="text-center py-4">
                  <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                  <p class="mt-2">Loading market data...</p>
                </div>
              </div>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
function withdrawFromMarket(transferId) {
  if (confirm('Are you sure? There is a 10% withdrawal fee.')) {
    const formData = new FormData();
    formData.append('transfer_queue_id', transferId);

    fetch('<%= global_withdraw_user_game_trades_path(@user_game) %>', {
      method: 'POST',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
      },
      body: formData
    }).then(response => {
      if (response.ok) {
        localStorage.setItem('scrollToTop', 'true');
        window.location.reload();
      } else {
        alert('Failed to withdraw from market. Please try again.');
      }
    }).catch(error => {
      console.error('Error:', error);
      alert('Failed to withdraw from market. Please try again.');
    });
  }
  return false;
}

// Global market resource selection and loading
document.addEventListener('DOMContentLoaded', function() {
  // Save the active tab to localStorage
  document.querySelectorAll('#marketTabs button').forEach(button => {
    button.addEventListener('shown.bs.tab', event => {
      localStorage.setItem('activeMarketTab', event.target.id);
    });
  });

  // Restore the active tab from localStorage
  const activeTab = localStorage.getItem('activeMarketTab');
  if (activeTab && document.getElementById(activeTab)) {
    const tab = new bootstrap.Tab(document.getElementById(activeTab));
    tab.show();

    // If we're showing the buy tab, select the first resource
    if (activeTab === 'buy-tab') {
      setTimeout(() => {
        if (!document.querySelector('.resource-btn.active')) {
          document.querySelector('.resource-btn').click();
        }
      }, 100);
    }
  } else {
    // If no stored tab, select the first resource when showing buy tab initially
    if (document.getElementById('buy-tab').classList.contains('active')) {
      setTimeout(() => {
        document.querySelector('.resource-btn').click();
      }, 100);
    }
  }

  // Resource button click handlers
  document.querySelectorAll('.resource-btn').forEach(button => {
    button.addEventListener('click', function() {
      const resource = this.getAttribute('data-resource');

      // Update active button state
      document.querySelectorAll('.resource-btn').forEach(btn => {
        btn.classList.remove('active', 'btn-primary');
        btn.classList.add('btn-outline-secondary');
      });
      this.classList.remove('btn-outline-secondary');
      this.classList.add('active', 'btn-primary');

      // Hide all resource markets and show the selected one
      document.querySelectorAll('.resource-market').forEach(market => {
        market.classList.add('d-none');
      });

      const marketElement = document.getElementById(`${resource}-market`);
      marketElement.classList.remove('d-none');

      // Load market data for the resource if not already loaded
      loadMarketData(resource);
    });
  });

  // Function to load market data for a resource
  function loadMarketData(resource) {
    const listingsElement = document.getElementById(`${resource}-listings`);

    // Check if we've already loaded this data
    if (listingsElement.getAttribute('data-loaded') === 'true') {
      return;
    }

    // Set loading state
    listingsElement.innerHTML = `
      <div class="text-center py-4">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading market data...</p>
      </div>
    `;

    // Fetch market data for the resource
    fetch(`/user_games/<%= @user_game.id %>/trades/global_market_data?resource=${resource}`, {
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => response.json())
    .then(data => {
      // Mark as loaded
      listingsElement.setAttribute('data-loaded', 'true');

      if (data.listings && data.listings.length > 0) {
        // Render market listings
        listingsElement.innerHTML = `
          <form action="/user_games/<%= @user_game.id %>/trades/global_buy" method="post">
            <input type="hidden" name="authenticity_token" value="${document.querySelector('meta[name="csrf-token"]').content}">
            <input type="hidden" name="resource" value="${resource}">
            <table class="table table-sm table-bordered">
              <thead class="table-light">
                <tr>
                  <th>Available</th>
                  <th>You Can Buy</th>
                  <th>Price (Per Unit)</th>
                  <th>Buy Quantity</th>
                </tr>
              </thead>
              <tbody>
                ${data.listings.map(listing => {
                  const playerGold = <%= @user_game.gold %>; // Get gold amount from ERB
                  return `
                  <tr>
                    <td>${new Intl.NumberFormat().format(listing.available)}</td>
                    <td>${new Intl.NumberFormat().format(Math.min(listing.available, Math.floor(playerGold / listing.price)))}</td>
                    <td>${new Intl.NumberFormat().format(listing.price)}</td>
                    <td>
                      ${listing.user_game_id == <%= @user_game.id %> ?
                        '<span class="badge bg-info">Your Listing</span>' :
                        `<input type="number" name="qty[${listing.id}]" class="form-control form-control-sm" min="0" max="${listing.available}">`
                      }
                    </td>
                  </tr>
                  `;
                }).join('')}
              </tbody>
              <tfoot>
                <tr>
                  <td colspan="4" class="text-end">
                    <button type="submit" class="btn btn-primary btn-sm">Buy ${resource.charAt(0).toUpperCase() + resource.slice(1)}</button>
                  </td>
                </tr>
              </tfoot>
            </table>
          </form>
        `;
      } else {
        // No listings available
        listingsElement.innerHTML = `
          <div class="alert alert-info">
            There are no ${resource} listings available to buy at this time.
          </div>
        `;
      }
    })
    .catch(error => {
      console.error('Error loading market data:', error);
      listingsElement.innerHTML = `
        <div class="alert alert-danger">
          Failed to load market data. Please try again.
          <button class="btn btn-outline-secondary btn-sm ms-2" onclick="loadMarketData('${resource}')">Retry</button>
        </div>
      `;
    });
  }

  // Show first resource market by default when buy tab is activated
  document.getElementById('buy-tab').addEventListener('shown.bs.tab', function() {
    // Click the first resource button if none are active
    if (!document.querySelector('.resource-btn.active')) {
      document.querySelector('.resource-btn').click();
    }
  });
});
</script>
