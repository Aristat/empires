<div class="card mb-3">
  <div class="card-header">
    <h5 class="mb-0">Build or Demolish</h5>
  </div>
  <div class="card-body">
    <%= form_with(url: user_game_build_queues_path(@user_game), method: :post, local: true, id: 'buildForm') do |f| %>
      <div class="row align-items-center">
        <div class="col-md-3">
          <%= f.select :building_queue_type, [%w[Build build], %w[Demolish demolish]], {}, { class: 'form-select', id: 'buildingQueueType' } %>
        </div>
        <div class="col-md-2">
          <%= f.number_field :building_quantity, value: 1, min: 1, max: BuildQueue::MAX_BUILDING_QUANTITY_PER_ACTION, class: 'form-control', size: 5 %>
        </div>
        <div class="col-md-5">
          <%= f.select :building_type,
                      options_for_select(
                        @data[:buildings].map do |key, building|
                          [
                            "#{building[:name]} (#{building[:settings][:cost_wood]} W, #{building[:settings][:cost_iron]} I, #{building[:settings][:cost_gold]} G, #{building[:settings][:squares]} #{building[:settings][:land]})",
                            key,
                            {
                              'data-wood' => building[:settings][:cost_wood],
                              'data-iron' => building[:settings][:cost_iron],
                              'data-gold' => building[:settings][:cost_gold],
                              'data-squares' => building[:settings][:squares],
                              'data-land' => building[:settings][:land]
                            }
                          ]
                        end
                      ),
                      { prompt: '--- Select a building to build or demolish ---' },
                      { class: 'form-select', id: 'buildingSelect', required: true } %>
        </div>
        <div class="col-md-2">
          <%= f.submit 'Queue', class: 'btn btn-primary' %>
          <button type="button" id="buildingMaxButton" class="btn btn-secondary ms-2">Max</button>
        </div>
      </div>

      <div class="row mt-2">
        <div class="col-12">
          <small class="text-muted">
            W - Wood, I - Iron, G - Gold, P - Plains, F - Forest, M - Mountains
          </small>
        </div>
      </div>

      <div class="row mt-2">
        <div class="col-12">
          <div id="allowBuild" class="text-primary"></div>
        </div>
      </div>
    <% end %>
  </div>
</div>

<% if @user_game.build_queues.any? %>
  <div class="card mb-3">
    <div class="card-header">
      <h5 class="mb-0">Your Building Queue</h5>
    </div>
    <div class="card-body">
      <div class="table-responsive">
        <table class="table table-striped table-hover align-middle">
          <thead class="table-light">
            <tr>
              <th>Building</th>
              <th class="text-end">Quantity</th>
              <th class="text-end">Time Needed</th>
              <th class="text-center">Actions</th>
            </tr>
          </thead>
          <tbody>
            <% num_builders = @data[:user_data][:num_builders] %>
            <% available_builders = num_builders - @data[:user_data][:wall_builders] %>

            <% @user_game.build_queues.ordered.each do |queue| %>
              <% building = @data[:buildings][queue.building_type.to_sym] %>
              <tr class="<%= 'table-secondary' if queue.on_hold %>">
                <td>
                  <%= building[:name] %>
                  <% if queue.queue_type == 'demolish' %>
                    <span class="text-danger">(Demolish)</span>
                  <% end %>
                </td>
                <td class="text-end"><%= number_with_delimiter(queue.quantity) %></td>
                <td class="text-end">
                  <% if available_builders > 0 %>
                    <%= number_with_delimiter((queue.time_needed.to_f / available_builders).ceil) %> turns
                    <small class="text-muted">(<%= number_with_delimiter(queue.time_needed) %> builders)</small>
                  <% else %>
                    <span class="text-warning">All builders are working on great wall</span>
                  <% end %>
                </td>
                <td class="text-center">
                  <div class="d-flex gap-1 justify-content-center">
                    <%= button_to 'Cancel',
                        user_game_build_queue_path(@user_game, queue),
                        method: :delete,
                        class: 'btn btn-sm btn-outline-danger',
                        form: { data: { turbo_confirm: 'Are you sure?' } } %>

                    <%= button_to queue.on_hold ? 'Resume' : 'Hold',
                        user_game_build_queue_path(@user_game, queue, { on_hold: !queue.on_hold }),
                        method: :patch,
                        class: "btn btn-sm btn-outline-#{queue.on_hold ? 'success' : 'warning'}" %>

                    <div class="btn-group btn-group-sm">
                      <%= button_to '↑',
                          user_game_build_queue_path(@user_game, queue, { position: 0 }),
                          method: :patch,
                          class: 'btn btn-outline-secondary',
                          title: 'Move to Top' %>

                      <%= button_to '↓',
                          user_game_build_queue_path(@user_game, queue, { position: -1 }),
                          method: :patch,
                          class: 'btn btn-outline-secondary',
                          title: 'Move to Bottom' %>
                    </div>
                  </div>
                </td>
              </tr>
            <% end %>
          </tbody>
          <% if @user_game.build_queues.count > 1 %>
            <tfoot>
              <tr>
                <td colspan="4" class="text-center">
                  <%= button_to 'Cancel All',
                      destroy_all_user_game_build_queues_path(@user_game),
                      method: :delete,
                      class: 'btn btn-danger',
                      form: { data: { turbo_confirm: 'Are you sure you want to cancel all building queues?' } } %>
                </td>
              </tr>
            </tfoot>
          <% end %>
        </table>
      </div>
    </div>
  </div>
<% end %>

<div class="card">
  <div class="card-header">
    <h5 class="mb-0">Building Status</h5>
  </div>
  <div class="card-body">
    <div class="table-responsive">
      <table class="table table-striped table-hover align-middle">
        <thead class="table-light">
        <tr>
          <th>Building</th>
          <th class="text-end">Have</th>
          <th class="text-end">Land</th>
          <th>Status</th>
          <th class="text-end">Workers</th>
          <th>Production</th>
          <th>Consumption</th>
        </tr>
        </thead>
        <tbody>
        <%= form_with(url: user_game_path(@game), method: :put, local: true) do |f| %>
          <% @data[:buildings].each do |key, building| %>
            <% have = @data[:user_data][key][:count] %>
            <% status = @data[:user_data][key][:status] %>
            <% land = @data[:user_data][key][:land] %>
            <% workers = @data[:user_data][key][:workers] %>

            <tr>
              <td>
                <%= building[:name] %>
              </td>
              <td class="text-end"><%= number_with_delimiter(have) %></td>
              <td class="text-end"><%= number_with_delimiter(land) %> <%= building[:settings][:land] %></td>
              <td>
                <% if building[:settings][:allow_off] %>
                  <%= f.select "#{key}_status",
                               (0..10).map { |n| [n * 10, n * 10] },
                               { selected: status },
                               { class: 'form-select form-select-sm' }
                  %>
                <% else %>
                  —
                <% end %>
              </td>
              <td class="text-end"><%= number_with_delimiter(workers) %></td>
              <td>
                <%= @data[:user_data][key][:production] %>
              </td>
              <td>
                <%= @data[:user_data][key][:consumption] %>
              </td>
            </tr>
          <% end %>

          <tr class="table-light">
            <td colspan="7" class="text-end">
              <%= f.submit 'Update Production', class: 'btn btn-primary' %>
            </td>
          </tr>
        <% end %>
        </tbody>
      </table>
    </div>
  </div>
</div>

<div class="card mt-3">
  <div class="card-header">
    <h5 class="mb-0">Population</h5>
  </div>
  <div class="card-body">
    <div class="table-responsive">
      <table class="table table-striped table-hover align-middle">
        <tbody>
          <tr>
            <td class="text-end">Total:</td>
            <td><%= number_with_delimiter(@user_game.people) %></td>
          </tr>
          <tr>
            <td class="text-end">Working:</td>
            <td><%= number_with_delimiter(@data[:user_data][:total_workers]) %></td>
          </tr>
          <tr>
            <td class="text-end">Construction Workers:</td>
            <td><%= number_with_delimiter(@data[:user_data][:num_builders]) %></td>
          </tr>
          <tr>
            <td class="text-end">Wall Builders:</td>
            <td><%= number_with_delimiter(@data[:user_data][:wall_builders]) %></td>
          </tr>
          <% if @data[:user_data][:free_people] < 0 %>
            <tr>
              <td colspan="2">
                <div class="text-danger">
                  You do not have enough people for your production.<br>
                  You need additional <%= number_with_delimiter(@data[:user_data][:free_people].abs) %> people.
                </div>
              </td>
            </tr>
          <% else %>
            <tr>
              <td class="text-end">Not Working:</td>
              <td><%= number_with_delimiter(@data[:user_data][:free_people]) %></td>
            </tr>
          <% end %>
          <tr>
            <td class="text-end">Extra House Space:</td>
            <td><%= number_with_delimiter(@data[:user_data][:free_house_space]) %></td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>

<script>

// Building calculation
function showBuild() {
  const buildingSelect = document.getElementById('buildingSelect');
  if (!buildingSelect || buildingSelect.selectedIndex === 0) return 0;

  const queueType = document.querySelector('select[name="building_queue_type"]').value;
  if (queueType === 'demolish') {
    const allowBuild = document.getElementById('allowBuild');
    if (allowBuild) {
      allowBuild.textContent = '';
    }
    return 0;
  }

  const selectedOption = buildingSelect.options[buildingSelect.selectedIndex];
  const freeMLand = <%= @data[:user_data][:free_mountains] %>;
  const freeFLand = <%= @data[:user_data][:free_forest] %>;
  const freePLand = <%= @data[:user_data][:free_plains] %>;
  const gold = <%= @user_game.gold %>;
  const iron = <%= @user_game.iron %>;
  const wood = <%= @user_game.wood %>;

  let canBuild = Number.MAX_VALUE;
  let temp = 0;

  if (selectedOption.dataset.gold > 0) {
    temp = Math.floor(gold / selectedOption.dataset.gold);
    if (temp < canBuild) canBuild = temp;
  }
  if (selectedOption.dataset.iron > 0) {
    temp = Math.floor(iron / selectedOption.dataset.iron);
    if (temp < canBuild) canBuild = temp;
  }
  if (selectedOption.dataset.wood > 0) {
    temp = Math.floor(wood / selectedOption.dataset.wood);
    if (temp < canBuild) canBuild = temp;
  }

  const land = selectedOption.dataset.land;
  const squares = selectedOption.dataset.squares;
  if (land === 'plain') {
    temp = Math.floor(freePLand / squares);
    if (temp < canBuild) canBuild = temp;
  }
  if (land === 'mountain') {
    temp = Math.floor(freeMLand / squares);
    if (temp < canBuild) canBuild = temp;
  }
  if (land === 'forest') {
    temp = Math.floor(freeFLand / squares);
    if (temp < canBuild) canBuild = temp;
  }

  const allowBuild = document.getElementById('allowBuild');
  if (allowBuild) {
    allowBuild.textContent = `Your resources allow you to build ${canBuild} ${selectedOption.text.split(' (')[0]}`;
  }

  return canBuild;
}

document.addEventListener('DOMContentLoaded', function() {
  const buildingSelect = document.getElementById('buildingSelect');
  if (buildingSelect) {
    buildingSelect.addEventListener('change', showBuild);
  }

  const buildingQueueTypeSelect = document.getElementById('buildingQueueType');
  if (buildingQueueTypeSelect) {
    buildingQueueTypeSelect.addEventListener('change', showBuild);
  }

  const buildingMaxButton = document.getElementById('buildingMaxButton');
  if (buildingMaxButton) {
      buildingMaxButton.addEventListener('click', function() {
      const maxValue = showBuild();
      if (maxValue > 0) {
        document.querySelector('input[name="building_quantity"]').value = maxValue;
      }
    });
  }
});
</script>
